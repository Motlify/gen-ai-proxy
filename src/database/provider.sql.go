// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: provider.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (
    id,
    user_id,
    name,
    base_url,
    type
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, name, base_url, type
`

type CreateProviderParams struct {
	ID      pgtype.UUID `json:"id"`
	UserID  pgtype.UUID `json:"user_id"`
	Name    string      `json:"name"`
	BaseUrl string      `json:"base_url"`
	Type    string      `json:"type"`
}

type CreateProviderRow struct {
	ID      pgtype.UUID `json:"id"`
	UserID  pgtype.UUID `json:"user_id"`
	Name    string      `json:"name"`
	BaseUrl string      `json:"base_url"`
	Type    string      `json:"type"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (CreateProviderRow, error) {
	row := q.db.QueryRow(ctx, createProvider,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.BaseUrl,
		arg.Type,
	)
	var i CreateProviderRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.BaseUrl,
		&i.Type,
	)
	return i, err
}

const getProvider = `-- name: GetProvider :one
SELECT id, user_id, name, base_url, type, deleted_at FROM providers WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetProviderParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetProvider(ctx context.Context, arg GetProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, getProvider, arg.ID, arg.UserID)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.BaseUrl,
		&i.Type,
		&i.DeletedAt,
	)
	return i, err
}

const listProviders = `-- name: ListProviders :many
SELECT id, user_id, name, base_url, type, deleted_at FROM providers WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) ListProviders(ctx context.Context, userID pgtype.UUID) ([]Provider, error) {
	rows, err := q.db.Query(ctx, listProviders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.BaseUrl,
			&i.Type,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteProvider = `-- name: SoftDeleteProvider :exec
UPDATE providers
SET deleted_at = NOW()
WHERE id = $1 AND user_id = $2
`

type SoftDeleteProviderParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) SoftDeleteProvider(ctx context.Context, arg SoftDeleteProviderParams) error {
	_, err := q.db.Exec(ctx, softDeleteProvider, arg.ID, arg.UserID)
	return err
}

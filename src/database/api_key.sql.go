// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_key.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    user_id,
    key_hash,
    name
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, key_hash, name, created_at, last_used_at
`

type CreateAPIKeyParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	KeyHash string      `json:"key_hash"`
	Name    string      `json:"name"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.UserID, arg.KeyHash, arg.Name)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.Name,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1 AND user_id = $2
`

type DeleteAPIKeyParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.ID, arg.UserID)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, user_id, key_hash, name, created_at, last_used_at FROM api_keys
WHERE key_hash = $1 AND user_id = $2
`

type GetAPIKeyParams struct {
	KeyHash string      `json:"key_hash"`
	UserID  pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, arg.KeyHash, arg.UserID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.Name,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, user_id, key_hash, name, created_at, last_used_at FROM api_keys
WHERE key_hash = $1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.Name,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, user_id, name, created_at, last_used_at FROM api_keys
WHERE user_id = $1
`

type ListAPIKeysRow struct {
	ID         pgtype.UUID        `json:"id"`
	UserID     pgtype.UUID        `json:"user_id"`
	Name       string             `json:"name"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	LastUsedAt pgtype.Timestamptz `json:"last_used_at"`
}

func (q *Queries) ListAPIKeys(ctx context.Context, userID pgtype.UUID) ([]ListAPIKeysRow, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAPIKeysRow
	for rows.Next() {
		var i ListAPIKeysRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET
    name = $2
WHERE name = $1 AND user_id = $3
RETURNING id, user_id, key_hash, name, created_at, last_used_at
`

type UpdateAPIKeyParams struct {
	Name   string      `json:"name"`
	Name_2 string      `json:"name_2"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey, arg.Name, arg.Name_2, arg.UserID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.Name,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys
SET
    last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
